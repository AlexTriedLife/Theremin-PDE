/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void ev_b_play(GButton source, GEvent event) { //_CODE_:b_play:961843:
  //println("b_play - GButton >> GEvent." + event + " @ " + millis());
  synth.osc.amp(0);
  isPlaying = true;
} //_CODE_:b_play:961843:

public void ev_b_stop(GButton source, GEvent event) { //_CODE_:b_stop:593680:
  //println("b_stop - GButton >> GEvent." + event + " @ " + millis());
  isPlaying = false;
} //_CODE_:b_stop:593680:

public void ev_txa_frequency(GTextArea source, GEvent event) { //_CODE_:txa_frequency:986994:
  
  //println("txa_frequency - GTextArea >> GEvent." + event + " @ " + millis());
  if (useMouse)
    source.setText(str(oscFreq));

} //_CODE_:txa_frequency:986994:

public void ev_sl_reverb(GSlider source, GEvent event) { //_CODE_:sl_reverb:296542:
  //println("slider1 - GSlider >> GEvent." + event + " @ " + millis());
  verb.wet(source.getCX());
} //_CODE_:sl_reverb:296542:

public void ev_sl_delay(GSlider source, GEvent event) { //_CODE_:sl_delay:488404:
  //println("slider3 - GSlider >> GEvent." + event + " @ " + millis());
} //_CODE_:sl_delay:488404:

public void ev_cb_reverb(GCheckbox source, GEvent event) { //_CODE_:cb_reverb:521905:
  println("checkbox1 - GCheckbox >> GEvent." + event + " @ " + millis());
  synth.osc.amp(0);
  verb.process(synth.osc);
  synth.osc.amp(1);
} //_CODE_:cb_reverb:521905:

public void ev_cb_delay(GCheckbox source, GEvent event) { //_CODE_:cb_delay:538959:
  //println("checkbox2 - GCheckbox >> GEvent." + event + " @ " + millis());
  synth.osc.amp(0);
  delay.process(synth.osc);
  synth.osc.amp(1);
} //_CODE_:cb_delay:538959:

public void ev_cb_mouseControls(GCheckbox source, GEvent event) { //_CODE_:cb_mouseControls:257636:
  println("cb_mouseControls - GCheckbox >> GEvent." + event + " @ " + millis());
  if (source.isSelected())  
    useMouse = true;
  else 
    useMouse = false;
    println("useMouse is", useMouse);
} //_CODE_:cb_mouseControls:257636:

public void ev_kn_changeWave(GKnob source, GEvent event) { //_CODE_:kn_changeWave:375861:
  println("kn_changeWave - GKnob >> GEvent." + event + " @ " + millis());
} //_CODE_:kn_changeWave:375861:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.CYAN_SCHEME);
  G4P.setMouseOverEnabled(false);
  G4P.setDisplayFont("Bahnschrift", G4P.PLAIN, 12);
  surface.setTitle("Sketch Window");
  b_play = new GButton(this, 30, 160, 80, 30);
  b_play.setText("Play");
  b_play.addEventHandler(this, "ev_b_play");
  b_stop = new GButton(this, 120, 160, 80, 30);
  b_stop.setText("Stop");
  b_stop.setLocalColorScheme(GCScheme.RED_SCHEME);
  b_stop.addEventHandler(this, "ev_b_stop");
  txa_frequency = new GTextArea(this, 280, 60, 120, 80, G4P.SCROLLBARS_NONE);
  txa_frequency.setPromptText("Current Frequency");
  txa_frequency.setOpaque(false);
  txa_frequency.addEventHandler(this, "ev_txa_frequency");
  sl_reverb = new GSlider(this, 160, 230, 100, 40, 10.0);
  sl_reverb.setLimits(0.5, 0.0, 1.0);
  sl_reverb.setNumberFormat(G4P.DECIMAL, 2);
  sl_reverb.setOpaque(false);
  sl_reverb.addEventHandler(this, "ev_sl_reverb");
  sl_delay = new GSlider(this, 160, 270, 100, 40, 10.0);
  sl_delay.setLimits(0.5, 0.0, 1.0);
  sl_delay.setNumberFormat(G4P.DECIMAL, 2);
  sl_delay.setOpaque(false);
  sl_delay.addEventHandler(this, "ev_sl_delay");
  cb_reverb = new GCheckbox(this, 30, 240, 120, 20);
  cb_reverb.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  cb_reverb.setText("Toggle Reverb");
  cb_reverb.setOpaque(false);
  cb_reverb.addEventHandler(this, "ev_cb_reverb");
  cb_delay = new GCheckbox(this, 30, 280, 120, 20);
  cb_delay.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  cb_delay.setText("Toggle Delay");
  cb_delay.setOpaque(false);
  cb_delay.addEventHandler(this, "ev_cb_delay");
  lb_effects = new GLabel(this, 30, 210, 80, 20);
  lb_effects.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lb_effects.setText("Effects");
  lb_effects.setOpaque(false);
  lb_playback = new GLabel(this, 30, 130, 80, 20);
  lb_playback.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lb_playback.setText("Playback");
  lb_playback.setOpaque(false);
  cb_mouseControls = new GCheckbox(this, 280, 150, 120, 20);
  cb_mouseControls.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  cb_mouseControls.setText("Toggle Mouse");
  cb_mouseControls.setOpaque(false);
  cb_mouseControls.addEventHandler(this, "ev_cb_mouseControls");
  lb_curFreq = new GLabel(this, 280, 30, 120, 20);
  lb_curFreq.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lb_curFreq.setText("Current frequency");
  lb_curFreq.setOpaque(false);
  lb_selectWave = new GLabel(this, 30, 20, 80, 20);
  lb_selectWave.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lb_selectWave.setText("Select wave");
  lb_selectWave.setOpaque(false);
  kn_changeWave = new GKnob(this, 40, 60, 60, 60, 0.8);
  kn_changeWave.setTurnRange(110, 70);
  kn_changeWave.setTurnMode(GKnob.CTRL_VERTICAL);
  kn_changeWave.setSensitivity(1);
  kn_changeWave.setShowArcOnly(false);
  kn_changeWave.setOverArcOnly(false);
  kn_changeWave.setIncludeOverBezel(false);
  kn_changeWave.setShowTrack(false);
  kn_changeWave.setLimits(0.0, 0.0, 5.0);
  kn_changeWave.setNbrTicks(5);
  kn_changeWave.setStickToTicks(true);
  kn_changeWave.setShowTicks(true);
  kn_changeWave.setEasing(2.0);
  kn_changeWave.setOpaque(false);
  kn_changeWave.addEventHandler(this, "ev_kn_changeWave");
}

// Variable declarations 
// autogenerated do not edit
GButton b_play; 
GButton b_stop; 
GTextArea txa_frequency; 
GSlider sl_reverb; 
GSlider sl_delay; 
GCheckbox cb_reverb; 
GCheckbox cb_delay; 
GLabel lb_effects; 
GLabel lb_playback; 
GCheckbox cb_mouseControls; 
GLabel lb_curFreq; 
GLabel lb_selectWave; 
GKnob kn_changeWave; 
